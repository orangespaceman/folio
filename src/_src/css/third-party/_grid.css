/*
 * CSS Wizardary Grid
 * Via: http://csswizardry.com/csswizardry-grids/
 */
/*------------------------------------*\
    $CSSWIZARDRY-GRIDS
\*------------------------------------*/
/**
 * CONTENTS
 * INTRODUCTION.........How the grid system works.
 * VARIABLES............Your settings.
 * MIXINS...............Library mixins.
 * GRID SETUP...........Build the grid structure.
 * WIDTHS...............Build our responsive widths around our breakpoints.
 * PUSH.................Push classes.
 * PULL.................Pull classes.
 */
/*------------------------------------*\
    $INTRODUCTION
\*------------------------------------*/
/**
 * csswizardry grids provides you with widths to suit a number of breakpoints
 * designed around devices of a size you specify. Out of the box, csswizardry
 * grids caters to the following types of device:
 *
 * palm     --  palm-based devices, like phones and small tablets
 * lap      --  lap-based devices, like iPads or laptops
 * portable --  all of the above
 * desk     --  stationary devices, like desktop computers
 * regular  --  any/all types of device
 *
 * These namespaces are then used in the library to give you the ability to
 * manipulate your layouts based around them, for example:
 *
   <div class="grid__item  one-whole  lap--one-half  desk--one-third">
 *
 * This would give you a grid item which is 100% width unless it is on a lap
 * device, at which point it become 50% wide, or it is on a desktop device, at
 * which point it becomes 33.333% width.
 *
 * csswizardry grids also has push and pull classes which allow you to nudge
 * grid items left and right by a defined amount. These follow the same naming
 * convention as above, but are prepended by either `push--` or `pull--`, for
 * example:
 *
   `class="grid__item  one-half  push--one-half"`
 *
 * This would give you a grid item which is 50% width and pushed over to the
 * right by 50%.
 *
 * All classes in csswizardry grids follow this patten, so you should fairly
 * quickly be able to piece together any combinations you can imagine, for
 * example:
 *
   `class="grid__item  one-whole  lap--one-half  desk--one-third  push--desk--one-third"`
 *
   `class="grid__item  one-quarter  palm--one-half  push--palm--one-half"`
 *
   `class="grid__item  palm--one-third  desk--five-twelfths"`
 */
/*------------------------------------*\
    $VARIABLES
\*------------------------------------*/
/**
 * If you are building a non-responsive site but would still like to use
 * csswizardry-grids, set this to ‘false’:
 */
/**
 * Is this build mobile first? Setting to ‘true’ means that all grids will be
 * 100% width if you do not apply a more specific class to them.
 */
/**
 * Set the spacing between your grid items.
 */
/**
 * Would you like Sass’ silent classes, or regular CSS classes?
 */
/**
 * Would you like push and pull classes enabled?
 */
/**
 * Using `inline-block` means that the grid items need their whitespace removing
 * in order for them to work correctly. Set the following to true if you are
 * going to achieve this by manually removing/commenting out any whitespace in
 * your HTML yourself.
 *
 * Setting this to false invokes a hack which cannot always be guaranteed,
 * please see the following for more detail:
 *
 * github.com/csswizardry/csswizardry-grids/commit/744d4b23c9d2b77d605b5991e54a397df72e0688
 * github.com/csswizardry/inuit.css/issues/170#issuecomment-14859371
 */
/**
 * Define your breakpoints. The first value is the prefix that shall be used for
 * your classes (e.g. `.palm--one-half`), the second value is the media query
 * that the breakpoint fires at.
 */
/**
 * Define which namespaced breakpoints you would like to generate for each of
 * widths, push and pull. This is handy if you only need pull on, say, desk, or
 * you only need a new width breakpoint at mobile sizes. It allows you to only
 * compile as much CSS as you need. All are turned on by default, but you can
 * add and remove breakpoints at will.
 *
 * Push and pull shall only be used if `$push` and/or `$pull` and `$responsive`
 * have been set to ‘true’.
 */
/**
 * You do not need to edit anything from this line onward; csswizardry-grids is
 * good to go. Happy griddin’!
 */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * These mixins are for the library to use only, you should not need to modify
 * them at all.
 *
 * Enclose a block of code with a media query as named in `$breakpoints`.
 */
/**
 * Drop relative positioning into silent classes which can’t take advantage of
 * the `[class*="push--"]` and `[class*="pull--"]` selectors.
 */
/*------------------------------------*\
    $GRID SETUP
\*------------------------------------*/
/**
 * 1. Allow the grid system to be used on lists.
 * 2. Remove any margins and paddings that might affect the grid system.
 * 3. Apply a negative `margin-left` to negate the columns’ gutters.
 */
.grid {
  list-style: none;
  /* [1] */
  margin: 0;
  /* [2] */
  padding: 0;
  /* [2] */
  margin-left: -2rem;
  /* [3] */ }

/**
     * 1. Cause columns to stack side-by-side.
     * 2. Space columns apart.
     * 3. Align columns to the tops of each other.
     * 4. Full-width unless told to behave otherwise.
     * 5. Required to combine fluid widths and fixed gutters.
     */
.grid__item {
  display: inline-block;
  /* [1] */
  padding-left: 2rem;
  /* [2] */
  vertical-align: top;
  /* [3] */
  width: 100%;
  /* [4] */
  -webkit-box-sizing: border-box;
  /* [5] */
  -moz-box-sizing: border-box;
  /* [5] */
  box-sizing: border-box;
  /* [5] */ }

/**
 * Reversed grids allow you to structure your source in the opposite order to
 * how your rendered layout will appear. Extends `.grid`.
 */
.grid--rev {
  direction: rtl;
  text-align: left; }
  .grid--rev > .grid__item {
    direction: ltr;
    text-align: left; }

/**
 * Gutterless grids have all the properties of regular grids, minus any spacing.
 * Extends `.grid`.
 */
.grid--full {
  margin-left: 0; }
  .grid--full > .grid__item {
    padding-left: 0; }

/**
 * Align the entire grid to the right. Extends `.grid`.
 */
.grid--right {
  text-align: right; }
  .grid--right > .grid__item {
    text-align: left; }

/**
 * Centered grids align grid items centrally without needing to use push or pull
 * classes. Extends `.grid`.
 */
.grid--center {
  text-align: center; }
  .grid--center > .grid__item {
    text-align: left; }

/**
 * Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends
 * `.grid`.
 */
.grid--middle > .grid__item {
  vertical-align: middle; }

.grid--bottom > .grid__item {
  vertical-align: bottom; }

/**
 * Create grids with narrower gutters. Extends `.grid`.
 */
.grid--narrow {
  margin-left: -1rem; }
  .grid--narrow > .grid__item {
    padding-left: 1rem; }

/**
 * Create grids with wider gutters. Extends `.grid`.
 */
.grid--wide {
  margin-left: -4rem; }
  .grid--wide > .grid__item {
    padding-left: 4rem; }

/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
/**
 * Create our width classes, prefixed by the specified namespace.
 */
/**
 * Our regular, non-responsive width classes.
 */
/**
     * Whole
     */
.one-whole {
  width: 100%; }

/**
     * Halves
     */
.one-half, .two-quarters, .three-sixths, .four-eighths, .five-tenths, .six-twelfths {
  width: 50%; }

/**
     * Thirds
     */
.one-third, .two-sixths, .four-twelfths {
  width: 33.333%; }

.two-thirds, .four-sixths, .eight-twelfths {
  width: 66.666%; }

/**
     * Quarters
     */
.one-quarter, .two-eighths, .three-twelfths {
  width: 25%; }

.three-quarters, .six-eighths, .nine-twelfths {
  width: 75%; }

/**
     * Fifths
     */
.one-fifth, .two-tenths {
  width: 20%; }

.two-fifths, .four-tenths {
  width: 40%; }

.three-fifths, .six-tenths {
  width: 60%; }

.four-fifths, .eight-tenths {
  width: 80%; }

/**
     * Sixths
     */
.one-sixth, .two-twelfths {
  width: 16.666%; }

.five-sixths, .ten-twelfths {
  width: 83.333%; }

/**
     * Eighths
     */
.one-eighth {
  width: 12.5%; }

.three-eighths {
  width: 37.5%; }

.five-eighths {
  width: 62.5%; }

.seven-eighths {
  width: 87.5%; }

/**
     * Tenths
     */
.one-tenth {
  width: 10%; }

.three-tenths {
  width: 30%; }

.seven-tenths {
  width: 70%; }

.nine-tenths {
  width: 90%; }

/**
     * Twelfths
     */
.one-twelfth {
  width: 8.333%; }

.five-twelfths {
  width: 41.666%; }

.seven-twelfths {
  width: 58.333%; }

.eleven-twelfths {
  width: 91.666%; }

/**
 * Our responsive classes, if we have enabled them.
 */
@media only screen and (--small) {
  /**
     * Whole
     */
  .small--one-whole {
    width: 100%; }

  /**
     * Halves
     */
  .small--one-half, .small--two-quarters, .small--three-sixths, .small--four-eighths, .small--five-tenths, .small--six-twelfths {
    width: 50%; }

  /**
     * Thirds
     */
  .small--one-third, .small--two-sixths, .small--four-twelfths {
    width: 33.333%; }

  .small--two-thirds, .small--four-sixths, .small--eight-twelfths {
    width: 66.666%; }

  /**
     * Quarters
     */
  .small--one-quarter, .small--two-eighths, .small--three-twelfths {
    width: 25%; }


  .small--three-quarters, .small--six-eighths, .small--nine-twelfths {
    width: 75%; }

  /**
     * Fifths
     */
  .small--one-fifth, .small--two-tenths {
    width: 20%; }

  .small--two-fifths, .small--four-tenths {
    width: 40%; }

  .small--three-fifths, .small--six-tenths {
    width: 60%; }

  .small--four-fifths, .small--eight-tenths {
    width: 80%; }

  /**
     * Sixths
     */
  .small--one-sixth, .small--two-twelfths {
    width: 16.666%; }




  .small--five-sixths, .small--ten-twelfths {
    width: 83.333%; }

  /**
     * Eighths
     */
  .small--one-eighth {
    width: 12.5%; }


  .small--three-eighths {
    width: 37.5%; }


  .small--five-eighths {
    width: 62.5%; }


  .small--seven-eighths {
    width: 87.5%; }

  /**
     * Tenths
     */
  .small--one-tenth {
    width: 10%; }


  .small--three-tenths {
    width: 30%; }




  .small--seven-tenths {
    width: 70%; }


  .small--nine-tenths {
    width: 90%; }

  /**
     * Twelfths
     */
  .small--one-twelfth {
    width: 8.333%; }




  .small--five-twelfths {
    width: 41.666%; }


  .small--seven-twelfths {
    width: 58.333%; }




  .small--eleven-twelfths {
    width: 91.666%; }
 }

@media only screen and (--medium) {
  /**
     * Whole
     */
  .medium--one-whole {
    width: 100%; }

  /**
     * Halves
     */
  .medium--one-half, .medium--two-quarters, .medium--three-sixths, .medium--four-eighths, .medium--five-tenths, .medium--six-twelfths {
    width: 50%; }

  /**
     * Thirds
     */
  .medium--one-third, .medium--two-sixths, .medium--four-twelfths {
    width: 33.333%; }

  .medium--two-thirds, .medium--four-sixths, .medium--eight-twelfths {
    width: 66.666%; }

  /**
     * Quarters
     */
  .medium--one-quarter, .medium--two-eighths, .medium--three-twelfths {
    width: 25%; }


  .medium--three-quarters, .medium--six-eighths, .medium--nine-twelfths {
    width: 75%; }

  /**
     * Fifths
     */
  .medium--one-fifth, .medium--two-tenths {
    width: 20%; }

  .medium--two-fifths, .medium--four-tenths {
    width: 40%; }

  .medium--three-fifths, .medium--six-tenths {
    width: 60%; }

  .medium--four-fifths, .medium--eight-tenths {
    width: 80%; }

  /**
     * Sixths
     */
  .medium--one-sixth, .medium--two-twelfths {
    width: 16.666%; }




  .medium--five-sixths, .medium--ten-twelfths {
    width: 83.333%; }

  /**
     * Eighths
     */
  .medium--one-eighth {
    width: 12.5%; }


  .medium--three-eighths {
    width: 37.5%; }


  .medium--five-eighths {
    width: 62.5%; }


  .medium--seven-eighths {
    width: 87.5%; }

  /**
     * Tenths
     */
  .medium--one-tenth {
    width: 10%; }


  .medium--three-tenths {
    width: 30%; }




  .medium--seven-tenths {
    width: 70%; }


  .medium--nine-tenths {
    width: 90%; }

  /**
     * Twelfths
     */
  .medium--one-twelfth {
    width: 8.333%; }




  .medium--five-twelfths {
    width: 41.666%; }


  .medium--seven-twelfths {
    width: 58.333%; }




  .medium--eleven-twelfths {
    width: 91.666%; }
 }

/*------------------------------------*\
    $PUSH
\*------------------------------------*/
/**
 * Push classes, to move grid items over to the right by certain amounts.
 */
/*------------------------------------*\
    $PULL
\*------------------------------------*/
/**
 * Pull classes, to move grid items back to the left by certain amounts.
 */